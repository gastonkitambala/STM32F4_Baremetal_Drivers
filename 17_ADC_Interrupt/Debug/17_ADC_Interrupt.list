
17_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000135c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800157c  0800157c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800157c  0800157c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001584  08001584  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001584  08001584  00002584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800158c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015e8  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015e8  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016d3  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c2  00000000  00000000  0000475f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00004e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000128  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9d6  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022ea  00000000  00000000  0001fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091380  00000000  00000000  00021dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ccc  00000000  00000000  000b3184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b3e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001514 	.word	0x08001514

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001514 	.word	0x08001514

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	@ (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <pa1_adc_interrupt_init>:
 * second = ch2,
 * third = ch3
 * */

void pa1_adc_interrupt_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	/****** CONFIGURE THE ADC GPIIO PIN ******/
	//Enable access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <pa1_adc_interrupt_init+0x64>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a16      	ldr	r2, [pc, #88]	@ (8000350 <pa1_adc_interrupt_init+0x64>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set the mode of PA1 to analog mode
	GPIOA->MODER |= (1<<2);
 80002fc:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <pa1_adc_interrupt_init+0x68>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <pa1_adc_interrupt_init+0x68>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<3);
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <pa1_adc_interrupt_init+0x68>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a11      	ldr	r2, [pc, #68]	@ (8000354 <pa1_adc_interrupt_init+0x68>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6013      	str	r3, [r2, #0]
	/* Configure the ADC MODULE */

	// Enable clock access to ADC
	RCC->APB2ENR |= ADC1EN;
 8000314:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <pa1_adc_interrupt_init+0x64>)
 8000316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000318:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <pa1_adc_interrupt_init+0x64>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800031e:	6453      	str	r3, [r2, #68]	@ 0x44

	//Enable ADC end-of conversion interrupt
	ADC1->CR1 |= CR1_EOCIE;
 8000320:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a0c      	ldr	r2, [pc, #48]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6053      	str	r3, [r2, #4]
	//Enable AC interrupt in NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 800032c:	2012      	movs	r0, #18
 800032e:	f7ff ffbf 	bl	80002b0 <__NVIC_EnableIRQ>
	/*Configure adc parameters*/
	//Conversion sequence start
	ADC1->SQR3 = ADC_CH1;
 8000332:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000334:	2201      	movs	r2, #1
 8000336:	635a      	str	r2, [r3, #52]	@ 0x34
	//Conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN1;
 8000338:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Enable ADC module */
	ADC1->CR2 |= CR2_ADON;
 800033e:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a05      	ldr	r2, [pc, #20]	@ (8000358 <pa1_adc_interrupt_init+0x6c>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6093      	str	r3, [r2, #8]
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020000 	.word	0x40020000
 8000358:	40012000 	.word	0x40012000

0800035c <start_conversion>:
	/* Enable ADC module */
	ADC1->CR2 |= CR2_ADON;
}

void start_conversion(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	//Enable continous conversion
	ADC1->CR2 |= CR2_CONT;
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <start_conversion+0x28>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a07      	ldr	r2, [pc, #28]	@ (8000384 <start_conversion+0x28>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6093      	str	r3, [r2, #8]
	//Start adc conversion
	ADC1->CR2 |= CR2_SWSTART;
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <start_conversion+0x28>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <start_conversion+0x28>)
 8000372:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000376:	6093      	str	r3, [r2, #8]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40012000 	.word	0x40012000

08000388 <main>:
//int voltage;

static void adc_callback(void);

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	uart2_tx_init();
 800038c:	f000 f8de 	bl	800054c <uart2_tx_init>
	pa1_adc_interrupt_init();
 8000390:	f7ff ffac 	bl	80002ec <pa1_adc_interrupt_init>
	start_conversion();
 8000394:	f7ff ffe2 	bl	800035c <start_conversion>

	while(1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <main+0x10>

0800039c <adc_callback>:

	}
}

static void adc_callback(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	sensor_value = (ADC1->DR);
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <adc_callback+0x1c>)
 80003a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a4:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <adc_callback+0x20>)
 80003a6:	6013      	str	r3, [r2, #0]
	//voltage = sensor_value *(3.3 / 4095);
	printf("Analog Sensor value : %d \n\r", (int)sensor_value);
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <adc_callback+0x20>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <adc_callback+0x24>)
 80003b0:	f000 fa42 	bl	8000838 <iprintf>
	//printf("Digital sensor value : %d \n\r", voltage);
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000
 80003bc:	20000078 	.word	0x20000078
 80003c0:	0800152c 	.word	0x0800152c

080003c4 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	//Check for EOC in status register (SR)
	if((ADC1->SR & SR_EOC) != 0)
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <ADC_IRQHandler+0x24>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d007      	beq.n	80003e4 <ADC_IRQHandler+0x20>
	{
		//Clear EOC
		ADC1->SR &= ~SR_EOC;
 80003d4:	4b04      	ldr	r3, [pc, #16]	@ (80003e8 <ADC_IRQHandler+0x24>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a03      	ldr	r2, [pc, #12]	@ (80003e8 <ADC_IRQHandler+0x24>)
 80003da:	f023 0302 	bic.w	r3, r3, #2
 80003de:	6013      	str	r3, [r2, #0]
		//Do Something
		adc_callback();
 80003e0:	f7ff ffdc 	bl	800039c <adc_callback>

	}
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40012000 	.word	0x40012000

080003ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	e00a      	b.n	8000414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003fe:	f3af 8000 	nop.w
 8000402:	4601      	mov	r1, r0
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	60ba      	str	r2, [r7, #8]
 800040a:	b2ca      	uxtb	r2, r1
 800040c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697a      	ldr	r2, [r7, #20]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	dbf0      	blt.n	80003fe <_read+0x12>
  }

  return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	60f8      	str	r0, [r7, #12]
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	e009      	b.n	800044c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	60ba      	str	r2, [r7, #8]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f877 	bl	8000534 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	429a      	cmp	r2, r3
 8000452:	dbf1      	blt.n	8000438 <_write+0x12>
  }
  return len;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <_close>:

int _close(int file)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800046a:	4618      	mov	r0, r3
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000486:	605a      	str	r2, [r3, #4]
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_isatty>:

int _isatty(int file)
{
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800049e:	2301      	movs	r3, #1
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	@ (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f000 fa42 	bl	8000980 <__errno>
 80004fc:	4603      	mov	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	@ (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	4a05      	ldr	r2, [pc, #20]	@ (800052c <_sbrk+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20020000 	.word	0x20020000
 8000528:	00000400 	.word	0x00000400
 800052c:	2000007c 	.word	0x2000007c
 8000530:	200001d0 	.word	0x200001d0

08000534 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate);
void uart2_write(int ch);


int __io_putchar(int ch)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f851 	bl	80005e4 <uart2_write>
	return ch;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <uart2_tx_init>:
	//Enable UART module
	USART2->CR1 |= CR1_UE;
}

void uart2_tx_init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	//Configure UART gpio pins
	//Enable clock access to gpioa
	RCC->AHB1ENR |= GPIOAEN;
 8000550:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <uart2_tx_init+0x88>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000554:	4a1f      	ldr	r2, [pc, #124]	@ (80005d4 <uart2_tx_init+0x88>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2 Mode to alternate function mode
	GPIOA->MODER &= ~(1<<4);
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <uart2_tx_init+0x8c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <uart2_tx_init+0x8c>)
 8000562:	f023 0310 	bic.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1<<5);
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <uart2_tx_init+0x8c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <uart2_tx_init+0x8c>)
 800056e:	f043 0320 	orr.w	r3, r3, #32
 8000572:	6013      	str	r3, [r2, #0]

	//Set PA2 alternate function type to UART_TX (AF7)
	GPIOA->AFR[0] |= (1<<8);
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <uart2_tx_init+0x8c>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <uart2_tx_init+0x8c>)
 800057a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <uart2_tx_init+0x8c>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <uart2_tx_init+0x8c>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <uart2_tx_init+0x8c>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <uart2_tx_init+0x8c>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000596:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <uart2_tx_init+0x8c>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <uart2_tx_init+0x8c>)
 800059e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005a2:	6213      	str	r3, [r2, #32]


	//Configure UART module
	//Enable access to UART2
	RCC->APB1ENR |= UART2EN;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <uart2_tx_init+0x88>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <uart2_tx_init+0x88>)
 80005aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE );
 80005b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005b4:	4909      	ldr	r1, [pc, #36]	@ (80005dc <uart2_tx_init+0x90>)
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <uart2_tx_init+0x94>)
 80005b8:	f000 f82c 	bl	8000614 <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 = CR1_TE;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <uart2_tx_init+0x94>)
 80005be:	2208      	movs	r2, #8
 80005c0:	60da      	str	r2, [r3, #12]
	//Enable UART module
	USART2->CR1 |= CR1_UE;
 80005c2:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <uart2_tx_init+0x94>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <uart2_tx_init+0x94>)
 80005c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005cc:	60d3      	str	r3, [r2, #12]
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	00f42400 	.word	0x00f42400
 80005e0:	40004400 	.word	0x40004400

080005e4 <uart2_write>:
	return USART2->DR;
}


void uart2_write(int ch)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty
	while (!(USART2->SR & SR_TXE)){}
 80005ec:	bf00      	nop
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <uart2_write+0x2c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <uart2_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <uart2_write+0x2c>)
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	6053      	str	r3, [r2, #4]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40004400 	.word	0x40004400

08000614 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f000 f808 	bl	8000638 <compute_uart_bd>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	609a      	str	r2, [r3, #8]
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(Baudrate/2U))/Baudrate);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	085a      	lsrs	r2, r3, #1
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	441a      	add	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000664:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	@ (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	@ (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068e:	f000 f97d 	bl	800098c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fe79 	bl	8000388 <main>

08000696 <LoopForever>:

LoopForever:
  b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006a4:	0800158c 	.word	0x0800158c
  ldr r2, =_sbss
 80006a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006ac:	200001cc 	.word	0x200001cc

080006b0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <BusFault_Handler>
	...

080006b4 <std>:
 80006b4:	2300      	movs	r3, #0
 80006b6:	b510      	push	{r4, lr}
 80006b8:	4604      	mov	r4, r0
 80006ba:	e9c0 3300 	strd	r3, r3, [r0]
 80006be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006c2:	6083      	str	r3, [r0, #8]
 80006c4:	8181      	strh	r1, [r0, #12]
 80006c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80006c8:	81c2      	strh	r2, [r0, #14]
 80006ca:	6183      	str	r3, [r0, #24]
 80006cc:	4619      	mov	r1, r3
 80006ce:	2208      	movs	r2, #8
 80006d0:	305c      	adds	r0, #92	@ 0x5c
 80006d2:	f000 f906 	bl	80008e2 <memset>
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x58>)
 80006d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x5c>)
 80006dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <std+0x60>)
 80006e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <std+0x64>)
 80006e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <std+0x68>)
 80006e8:	6224      	str	r4, [r4, #32]
 80006ea:	429c      	cmp	r4, r3
 80006ec:	d006      	beq.n	80006fc <std+0x48>
 80006ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006f2:	4294      	cmp	r4, r2
 80006f4:	d002      	beq.n	80006fc <std+0x48>
 80006f6:	33d0      	adds	r3, #208	@ 0xd0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d105      	bne.n	8000708 <std+0x54>
 80006fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f000 b966 	b.w	80009d4 <__retarget_lock_init_recursive>
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	0800085d 	.word	0x0800085d
 8000710:	0800087f 	.word	0x0800087f
 8000714:	080008b7 	.word	0x080008b7
 8000718:	080008db 	.word	0x080008db
 800071c:	20000080 	.word	0x20000080

08000720 <stdio_exit_handler>:
 8000720:	4a02      	ldr	r2, [pc, #8]	@ (800072c <stdio_exit_handler+0xc>)
 8000722:	4903      	ldr	r1, [pc, #12]	@ (8000730 <stdio_exit_handler+0x10>)
 8000724:	4803      	ldr	r0, [pc, #12]	@ (8000734 <stdio_exit_handler+0x14>)
 8000726:	f000 b869 	b.w	80007fc <_fwalk_sglue>
 800072a:	bf00      	nop
 800072c:	20000000 	.word	0x20000000
 8000730:	08001275 	.word	0x08001275
 8000734:	20000010 	.word	0x20000010

08000738 <cleanup_stdio>:
 8000738:	6841      	ldr	r1, [r0, #4]
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <cleanup_stdio+0x34>)
 800073c:	4299      	cmp	r1, r3
 800073e:	b510      	push	{r4, lr}
 8000740:	4604      	mov	r4, r0
 8000742:	d001      	beq.n	8000748 <cleanup_stdio+0x10>
 8000744:	f000 fd96 	bl	8001274 <_fflush_r>
 8000748:	68a1      	ldr	r1, [r4, #8]
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <cleanup_stdio+0x38>)
 800074c:	4299      	cmp	r1, r3
 800074e:	d002      	beq.n	8000756 <cleanup_stdio+0x1e>
 8000750:	4620      	mov	r0, r4
 8000752:	f000 fd8f 	bl	8001274 <_fflush_r>
 8000756:	68e1      	ldr	r1, [r4, #12]
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <cleanup_stdio+0x3c>)
 800075a:	4299      	cmp	r1, r3
 800075c:	d004      	beq.n	8000768 <cleanup_stdio+0x30>
 800075e:	4620      	mov	r0, r4
 8000760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000764:	f000 bd86 	b.w	8001274 <_fflush_r>
 8000768:	bd10      	pop	{r4, pc}
 800076a:	bf00      	nop
 800076c:	20000080 	.word	0x20000080
 8000770:	200000e8 	.word	0x200000e8
 8000774:	20000150 	.word	0x20000150

08000778 <global_stdio_init.part.0>:
 8000778:	b510      	push	{r4, lr}
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <global_stdio_init.part.0+0x30>)
 800077c:	4c0b      	ldr	r4, [pc, #44]	@ (80007ac <global_stdio_init.part.0+0x34>)
 800077e:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <global_stdio_init.part.0+0x38>)
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	4620      	mov	r0, r4
 8000784:	2200      	movs	r2, #0
 8000786:	2104      	movs	r1, #4
 8000788:	f7ff ff94 	bl	80006b4 <std>
 800078c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000790:	2201      	movs	r2, #1
 8000792:	2109      	movs	r1, #9
 8000794:	f7ff ff8e 	bl	80006b4 <std>
 8000798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800079c:	2202      	movs	r2, #2
 800079e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a2:	2112      	movs	r1, #18
 80007a4:	f7ff bf86 	b.w	80006b4 <std>
 80007a8:	200001b8 	.word	0x200001b8
 80007ac:	20000080 	.word	0x20000080
 80007b0:	08000721 	.word	0x08000721

080007b4 <__sfp_lock_acquire>:
 80007b4:	4801      	ldr	r0, [pc, #4]	@ (80007bc <__sfp_lock_acquire+0x8>)
 80007b6:	f000 b90e 	b.w	80009d6 <__retarget_lock_acquire_recursive>
 80007ba:	bf00      	nop
 80007bc:	200001c1 	.word	0x200001c1

080007c0 <__sfp_lock_release>:
 80007c0:	4801      	ldr	r0, [pc, #4]	@ (80007c8 <__sfp_lock_release+0x8>)
 80007c2:	f000 b909 	b.w	80009d8 <__retarget_lock_release_recursive>
 80007c6:	bf00      	nop
 80007c8:	200001c1 	.word	0x200001c1

080007cc <__sinit>:
 80007cc:	b510      	push	{r4, lr}
 80007ce:	4604      	mov	r4, r0
 80007d0:	f7ff fff0 	bl	80007b4 <__sfp_lock_acquire>
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	b11b      	cbz	r3, 80007e0 <__sinit+0x14>
 80007d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007dc:	f7ff bff0 	b.w	80007c0 <__sfp_lock_release>
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__sinit+0x28>)
 80007e2:	6223      	str	r3, [r4, #32]
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__sinit+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f5      	bne.n	80007d8 <__sinit+0xc>
 80007ec:	f7ff ffc4 	bl	8000778 <global_stdio_init.part.0>
 80007f0:	e7f2      	b.n	80007d8 <__sinit+0xc>
 80007f2:	bf00      	nop
 80007f4:	08000739 	.word	0x08000739
 80007f8:	200001b8 	.word	0x200001b8

080007fc <_fwalk_sglue>:
 80007fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000800:	4607      	mov	r7, r0
 8000802:	4688      	mov	r8, r1
 8000804:	4614      	mov	r4, r2
 8000806:	2600      	movs	r6, #0
 8000808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800080c:	f1b9 0901 	subs.w	r9, r9, #1
 8000810:	d505      	bpl.n	800081e <_fwalk_sglue+0x22>
 8000812:	6824      	ldr	r4, [r4, #0]
 8000814:	2c00      	cmp	r4, #0
 8000816:	d1f7      	bne.n	8000808 <_fwalk_sglue+0xc>
 8000818:	4630      	mov	r0, r6
 800081a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081e:	89ab      	ldrh	r3, [r5, #12]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d907      	bls.n	8000834 <_fwalk_sglue+0x38>
 8000824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000828:	3301      	adds	r3, #1
 800082a:	d003      	beq.n	8000834 <_fwalk_sglue+0x38>
 800082c:	4629      	mov	r1, r5
 800082e:	4638      	mov	r0, r7
 8000830:	47c0      	blx	r8
 8000832:	4306      	orrs	r6, r0
 8000834:	3568      	adds	r5, #104	@ 0x68
 8000836:	e7e9      	b.n	800080c <_fwalk_sglue+0x10>

08000838 <iprintf>:
 8000838:	b40f      	push	{r0, r1, r2, r3}
 800083a:	b507      	push	{r0, r1, r2, lr}
 800083c:	4906      	ldr	r1, [pc, #24]	@ (8000858 <iprintf+0x20>)
 800083e:	ab04      	add	r3, sp, #16
 8000840:	6808      	ldr	r0, [r1, #0]
 8000842:	f853 2b04 	ldr.w	r2, [r3], #4
 8000846:	6881      	ldr	r1, [r0, #8]
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	f000 f9e9 	bl	8000c20 <_vfiprintf_r>
 800084e:	b003      	add	sp, #12
 8000850:	f85d eb04 	ldr.w	lr, [sp], #4
 8000854:	b004      	add	sp, #16
 8000856:	4770      	bx	lr
 8000858:	2000000c 	.word	0x2000000c

0800085c <__sread>:
 800085c:	b510      	push	{r4, lr}
 800085e:	460c      	mov	r4, r1
 8000860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000864:	f000 f868 	bl	8000938 <_read_r>
 8000868:	2800      	cmp	r0, #0
 800086a:	bfab      	itete	ge
 800086c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800086e:	89a3      	ldrhlt	r3, [r4, #12]
 8000870:	181b      	addge	r3, r3, r0
 8000872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000876:	bfac      	ite	ge
 8000878:	6563      	strge	r3, [r4, #84]	@ 0x54
 800087a:	81a3      	strhlt	r3, [r4, #12]
 800087c:	bd10      	pop	{r4, pc}

0800087e <__swrite>:
 800087e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000882:	461f      	mov	r7, r3
 8000884:	898b      	ldrh	r3, [r1, #12]
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	4605      	mov	r5, r0
 800088a:	460c      	mov	r4, r1
 800088c:	4616      	mov	r6, r2
 800088e:	d505      	bpl.n	800089c <__swrite+0x1e>
 8000890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000894:	2302      	movs	r3, #2
 8000896:	2200      	movs	r2, #0
 8000898:	f000 f83c 	bl	8000914 <_lseek_r>
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a6:	81a3      	strh	r3, [r4, #12]
 80008a8:	4632      	mov	r2, r6
 80008aa:	463b      	mov	r3, r7
 80008ac:	4628      	mov	r0, r5
 80008ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008b2:	f000 b853 	b.w	800095c <_write_r>

080008b6 <__sseek>:
 80008b6:	b510      	push	{r4, lr}
 80008b8:	460c      	mov	r4, r1
 80008ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008be:	f000 f829 	bl	8000914 <_lseek_r>
 80008c2:	1c43      	adds	r3, r0, #1
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	bf15      	itete	ne
 80008c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008d2:	81a3      	strheq	r3, [r4, #12]
 80008d4:	bf18      	it	ne
 80008d6:	81a3      	strhne	r3, [r4, #12]
 80008d8:	bd10      	pop	{r4, pc}

080008da <__sclose>:
 80008da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008de:	f000 b809 	b.w	80008f4 <_close_r>

080008e2 <memset>:
 80008e2:	4402      	add	r2, r0
 80008e4:	4603      	mov	r3, r0
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d100      	bne.n	80008ec <memset+0xa>
 80008ea:	4770      	bx	lr
 80008ec:	f803 1b01 	strb.w	r1, [r3], #1
 80008f0:	e7f9      	b.n	80008e6 <memset+0x4>
	...

080008f4 <_close_r>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4d06      	ldr	r5, [pc, #24]	@ (8000910 <_close_r+0x1c>)
 80008f8:	2300      	movs	r3, #0
 80008fa:	4604      	mov	r4, r0
 80008fc:	4608      	mov	r0, r1
 80008fe:	602b      	str	r3, [r5, #0]
 8000900:	f7ff fdad 	bl	800045e <_close>
 8000904:	1c43      	adds	r3, r0, #1
 8000906:	d102      	bne.n	800090e <_close_r+0x1a>
 8000908:	682b      	ldr	r3, [r5, #0]
 800090a:	b103      	cbz	r3, 800090e <_close_r+0x1a>
 800090c:	6023      	str	r3, [r4, #0]
 800090e:	bd38      	pop	{r3, r4, r5, pc}
 8000910:	200001bc 	.word	0x200001bc

08000914 <_lseek_r>:
 8000914:	b538      	push	{r3, r4, r5, lr}
 8000916:	4d07      	ldr	r5, [pc, #28]	@ (8000934 <_lseek_r+0x20>)
 8000918:	4604      	mov	r4, r0
 800091a:	4608      	mov	r0, r1
 800091c:	4611      	mov	r1, r2
 800091e:	2200      	movs	r2, #0
 8000920:	602a      	str	r2, [r5, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	f7ff fdc2 	bl	80004ac <_lseek>
 8000928:	1c43      	adds	r3, r0, #1
 800092a:	d102      	bne.n	8000932 <_lseek_r+0x1e>
 800092c:	682b      	ldr	r3, [r5, #0]
 800092e:	b103      	cbz	r3, 8000932 <_lseek_r+0x1e>
 8000930:	6023      	str	r3, [r4, #0]
 8000932:	bd38      	pop	{r3, r4, r5, pc}
 8000934:	200001bc 	.word	0x200001bc

08000938 <_read_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4d07      	ldr	r5, [pc, #28]	@ (8000958 <_read_r+0x20>)
 800093c:	4604      	mov	r4, r0
 800093e:	4608      	mov	r0, r1
 8000940:	4611      	mov	r1, r2
 8000942:	2200      	movs	r2, #0
 8000944:	602a      	str	r2, [r5, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	f7ff fd50 	bl	80003ec <_read>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	d102      	bne.n	8000956 <_read_r+0x1e>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	b103      	cbz	r3, 8000956 <_read_r+0x1e>
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	200001bc 	.word	0x200001bc

0800095c <_write_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d07      	ldr	r5, [pc, #28]	@ (800097c <_write_r+0x20>)
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	2200      	movs	r2, #0
 8000968:	602a      	str	r2, [r5, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	f7ff fd5b 	bl	8000426 <_write>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_write_r+0x1e>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_write_r+0x1e>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	200001bc 	.word	0x200001bc

08000980 <__errno>:
 8000980:	4b01      	ldr	r3, [pc, #4]	@ (8000988 <__errno+0x8>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2000000c 	.word	0x2000000c

0800098c <__libc_init_array>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	4d0d      	ldr	r5, [pc, #52]	@ (80009c4 <__libc_init_array+0x38>)
 8000990:	4c0d      	ldr	r4, [pc, #52]	@ (80009c8 <__libc_init_array+0x3c>)
 8000992:	1b64      	subs	r4, r4, r5
 8000994:	10a4      	asrs	r4, r4, #2
 8000996:	2600      	movs	r6, #0
 8000998:	42a6      	cmp	r6, r4
 800099a:	d109      	bne.n	80009b0 <__libc_init_array+0x24>
 800099c:	4d0b      	ldr	r5, [pc, #44]	@ (80009cc <__libc_init_array+0x40>)
 800099e:	4c0c      	ldr	r4, [pc, #48]	@ (80009d0 <__libc_init_array+0x44>)
 80009a0:	f000 fdb8 	bl	8001514 <_init>
 80009a4:	1b64      	subs	r4, r4, r5
 80009a6:	10a4      	asrs	r4, r4, #2
 80009a8:	2600      	movs	r6, #0
 80009aa:	42a6      	cmp	r6, r4
 80009ac:	d105      	bne.n	80009ba <__libc_init_array+0x2e>
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b4:	4798      	blx	r3
 80009b6:	3601      	adds	r6, #1
 80009b8:	e7ee      	b.n	8000998 <__libc_init_array+0xc>
 80009ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80009be:	4798      	blx	r3
 80009c0:	3601      	adds	r6, #1
 80009c2:	e7f2      	b.n	80009aa <__libc_init_array+0x1e>
 80009c4:	08001584 	.word	0x08001584
 80009c8:	08001584 	.word	0x08001584
 80009cc:	08001584 	.word	0x08001584
 80009d0:	08001588 	.word	0x08001588

080009d4 <__retarget_lock_init_recursive>:
 80009d4:	4770      	bx	lr

080009d6 <__retarget_lock_acquire_recursive>:
 80009d6:	4770      	bx	lr

080009d8 <__retarget_lock_release_recursive>:
 80009d8:	4770      	bx	lr
	...

080009dc <_free_r>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	4605      	mov	r5, r0
 80009e0:	2900      	cmp	r1, #0
 80009e2:	d041      	beq.n	8000a68 <_free_r+0x8c>
 80009e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009e8:	1f0c      	subs	r4, r1, #4
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	bfb8      	it	lt
 80009ee:	18e4      	addlt	r4, r4, r3
 80009f0:	f000 f8e0 	bl	8000bb4 <__malloc_lock>
 80009f4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <_free_r+0x90>)
 80009f6:	6813      	ldr	r3, [r2, #0]
 80009f8:	b933      	cbnz	r3, 8000a08 <_free_r+0x2c>
 80009fa:	6063      	str	r3, [r4, #4]
 80009fc:	6014      	str	r4, [r2, #0]
 80009fe:	4628      	mov	r0, r5
 8000a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a04:	f000 b8dc 	b.w	8000bc0 <__malloc_unlock>
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <_free_r+0x42>
 8000a0c:	6820      	ldr	r0, [r4, #0]
 8000a0e:	1821      	adds	r1, r4, r0
 8000a10:	428b      	cmp	r3, r1
 8000a12:	bf01      	itttt	eq
 8000a14:	6819      	ldreq	r1, [r3, #0]
 8000a16:	685b      	ldreq	r3, [r3, #4]
 8000a18:	1809      	addeq	r1, r1, r0
 8000a1a:	6021      	streq	r1, [r4, #0]
 8000a1c:	e7ed      	b.n	80009fa <_free_r+0x1e>
 8000a1e:	461a      	mov	r2, r3
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	b10b      	cbz	r3, 8000a28 <_free_r+0x4c>
 8000a24:	42a3      	cmp	r3, r4
 8000a26:	d9fa      	bls.n	8000a1e <_free_r+0x42>
 8000a28:	6811      	ldr	r1, [r2, #0]
 8000a2a:	1850      	adds	r0, r2, r1
 8000a2c:	42a0      	cmp	r0, r4
 8000a2e:	d10b      	bne.n	8000a48 <_free_r+0x6c>
 8000a30:	6820      	ldr	r0, [r4, #0]
 8000a32:	4401      	add	r1, r0
 8000a34:	1850      	adds	r0, r2, r1
 8000a36:	4283      	cmp	r3, r0
 8000a38:	6011      	str	r1, [r2, #0]
 8000a3a:	d1e0      	bne.n	80009fe <_free_r+0x22>
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	6053      	str	r3, [r2, #4]
 8000a42:	4408      	add	r0, r1
 8000a44:	6010      	str	r0, [r2, #0]
 8000a46:	e7da      	b.n	80009fe <_free_r+0x22>
 8000a48:	d902      	bls.n	8000a50 <_free_r+0x74>
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	602b      	str	r3, [r5, #0]
 8000a4e:	e7d6      	b.n	80009fe <_free_r+0x22>
 8000a50:	6820      	ldr	r0, [r4, #0]
 8000a52:	1821      	adds	r1, r4, r0
 8000a54:	428b      	cmp	r3, r1
 8000a56:	bf04      	itt	eq
 8000a58:	6819      	ldreq	r1, [r3, #0]
 8000a5a:	685b      	ldreq	r3, [r3, #4]
 8000a5c:	6063      	str	r3, [r4, #4]
 8000a5e:	bf04      	itt	eq
 8000a60:	1809      	addeq	r1, r1, r0
 8000a62:	6021      	streq	r1, [r4, #0]
 8000a64:	6054      	str	r4, [r2, #4]
 8000a66:	e7ca      	b.n	80009fe <_free_r+0x22>
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001c8 	.word	0x200001c8

08000a70 <sbrk_aligned>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	4e0f      	ldr	r6, [pc, #60]	@ (8000ab0 <sbrk_aligned+0x40>)
 8000a74:	460c      	mov	r4, r1
 8000a76:	6831      	ldr	r1, [r6, #0]
 8000a78:	4605      	mov	r5, r0
 8000a7a:	b911      	cbnz	r1, 8000a82 <sbrk_aligned+0x12>
 8000a7c:	f000 fcb6 	bl	80013ec <_sbrk_r>
 8000a80:	6030      	str	r0, [r6, #0]
 8000a82:	4621      	mov	r1, r4
 8000a84:	4628      	mov	r0, r5
 8000a86:	f000 fcb1 	bl	80013ec <_sbrk_r>
 8000a8a:	1c43      	adds	r3, r0, #1
 8000a8c:	d103      	bne.n	8000a96 <sbrk_aligned+0x26>
 8000a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a92:	4620      	mov	r0, r4
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	1cc4      	adds	r4, r0, #3
 8000a98:	f024 0403 	bic.w	r4, r4, #3
 8000a9c:	42a0      	cmp	r0, r4
 8000a9e:	d0f8      	beq.n	8000a92 <sbrk_aligned+0x22>
 8000aa0:	1a21      	subs	r1, r4, r0
 8000aa2:	4628      	mov	r0, r5
 8000aa4:	f000 fca2 	bl	80013ec <_sbrk_r>
 8000aa8:	3001      	adds	r0, #1
 8000aaa:	d1f2      	bne.n	8000a92 <sbrk_aligned+0x22>
 8000aac:	e7ef      	b.n	8000a8e <sbrk_aligned+0x1e>
 8000aae:	bf00      	nop
 8000ab0:	200001c4 	.word	0x200001c4

08000ab4 <_malloc_r>:
 8000ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ab8:	1ccd      	adds	r5, r1, #3
 8000aba:	f025 0503 	bic.w	r5, r5, #3
 8000abe:	3508      	adds	r5, #8
 8000ac0:	2d0c      	cmp	r5, #12
 8000ac2:	bf38      	it	cc
 8000ac4:	250c      	movcc	r5, #12
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	4606      	mov	r6, r0
 8000aca:	db01      	blt.n	8000ad0 <_malloc_r+0x1c>
 8000acc:	42a9      	cmp	r1, r5
 8000ace:	d904      	bls.n	8000ada <_malloc_r+0x26>
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	6033      	str	r3, [r6, #0]
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bb0 <_malloc_r+0xfc>
 8000ade:	f000 f869 	bl	8000bb4 <__malloc_lock>
 8000ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae6:	461c      	mov	r4, r3
 8000ae8:	bb44      	cbnz	r4, 8000b3c <_malloc_r+0x88>
 8000aea:	4629      	mov	r1, r5
 8000aec:	4630      	mov	r0, r6
 8000aee:	f7ff ffbf 	bl	8000a70 <sbrk_aligned>
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	4604      	mov	r4, r0
 8000af6:	d158      	bne.n	8000baa <_malloc_r+0xf6>
 8000af8:	f8d8 4000 	ldr.w	r4, [r8]
 8000afc:	4627      	mov	r7, r4
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d143      	bne.n	8000b8a <_malloc_r+0xd6>
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d04b      	beq.n	8000b9e <_malloc_r+0xea>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	4639      	mov	r1, r7
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	eb04 0903 	add.w	r9, r4, r3
 8000b10:	f000 fc6c 	bl	80013ec <_sbrk_r>
 8000b14:	4581      	cmp	r9, r0
 8000b16:	d142      	bne.n	8000b9e <_malloc_r+0xea>
 8000b18:	6821      	ldr	r1, [r4, #0]
 8000b1a:	1a6d      	subs	r5, r5, r1
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	4630      	mov	r0, r6
 8000b20:	f7ff ffa6 	bl	8000a70 <sbrk_aligned>
 8000b24:	3001      	adds	r0, #1
 8000b26:	d03a      	beq.n	8000b9e <_malloc_r+0xea>
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	442b      	add	r3, r5
 8000b2c:	6023      	str	r3, [r4, #0]
 8000b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	bb62      	cbnz	r2, 8000b90 <_malloc_r+0xdc>
 8000b36:	f8c8 7000 	str.w	r7, [r8]
 8000b3a:	e00f      	b.n	8000b5c <_malloc_r+0xa8>
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	1b52      	subs	r2, r2, r5
 8000b40:	d420      	bmi.n	8000b84 <_malloc_r+0xd0>
 8000b42:	2a0b      	cmp	r2, #11
 8000b44:	d917      	bls.n	8000b76 <_malloc_r+0xc2>
 8000b46:	1961      	adds	r1, r4, r5
 8000b48:	42a3      	cmp	r3, r4
 8000b4a:	6025      	str	r5, [r4, #0]
 8000b4c:	bf18      	it	ne
 8000b4e:	6059      	strne	r1, [r3, #4]
 8000b50:	6863      	ldr	r3, [r4, #4]
 8000b52:	bf08      	it	eq
 8000b54:	f8c8 1000 	streq.w	r1, [r8]
 8000b58:	5162      	str	r2, [r4, r5]
 8000b5a:	604b      	str	r3, [r1, #4]
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f000 f82f 	bl	8000bc0 <__malloc_unlock>
 8000b62:	f104 000b 	add.w	r0, r4, #11
 8000b66:	1d23      	adds	r3, r4, #4
 8000b68:	f020 0007 	bic.w	r0, r0, #7
 8000b6c:	1ac2      	subs	r2, r0, r3
 8000b6e:	bf1c      	itt	ne
 8000b70:	1a1b      	subne	r3, r3, r0
 8000b72:	50a3      	strne	r3, [r4, r2]
 8000b74:	e7af      	b.n	8000ad6 <_malloc_r+0x22>
 8000b76:	6862      	ldr	r2, [r4, #4]
 8000b78:	42a3      	cmp	r3, r4
 8000b7a:	bf0c      	ite	eq
 8000b7c:	f8c8 2000 	streq.w	r2, [r8]
 8000b80:	605a      	strne	r2, [r3, #4]
 8000b82:	e7eb      	b.n	8000b5c <_malloc_r+0xa8>
 8000b84:	4623      	mov	r3, r4
 8000b86:	6864      	ldr	r4, [r4, #4]
 8000b88:	e7ae      	b.n	8000ae8 <_malloc_r+0x34>
 8000b8a:	463c      	mov	r4, r7
 8000b8c:	687f      	ldr	r7, [r7, #4]
 8000b8e:	e7b6      	b.n	8000afe <_malloc_r+0x4a>
 8000b90:	461a      	mov	r2, r3
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	d1fb      	bne.n	8000b90 <_malloc_r+0xdc>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6053      	str	r3, [r2, #4]
 8000b9c:	e7de      	b.n	8000b5c <_malloc_r+0xa8>
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	6033      	str	r3, [r6, #0]
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f000 f80c 	bl	8000bc0 <__malloc_unlock>
 8000ba8:	e794      	b.n	8000ad4 <_malloc_r+0x20>
 8000baa:	6005      	str	r5, [r0, #0]
 8000bac:	e7d6      	b.n	8000b5c <_malloc_r+0xa8>
 8000bae:	bf00      	nop
 8000bb0:	200001c8 	.word	0x200001c8

08000bb4 <__malloc_lock>:
 8000bb4:	4801      	ldr	r0, [pc, #4]	@ (8000bbc <__malloc_lock+0x8>)
 8000bb6:	f7ff bf0e 	b.w	80009d6 <__retarget_lock_acquire_recursive>
 8000bba:	bf00      	nop
 8000bbc:	200001c0 	.word	0x200001c0

08000bc0 <__malloc_unlock>:
 8000bc0:	4801      	ldr	r0, [pc, #4]	@ (8000bc8 <__malloc_unlock+0x8>)
 8000bc2:	f7ff bf09 	b.w	80009d8 <__retarget_lock_release_recursive>
 8000bc6:	bf00      	nop
 8000bc8:	200001c0 	.word	0x200001c0

08000bcc <__sfputc_r>:
 8000bcc:	6893      	ldr	r3, [r2, #8]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	b410      	push	{r4}
 8000bd4:	6093      	str	r3, [r2, #8]
 8000bd6:	da08      	bge.n	8000bea <__sfputc_r+0x1e>
 8000bd8:	6994      	ldr	r4, [r2, #24]
 8000bda:	42a3      	cmp	r3, r4
 8000bdc:	db01      	blt.n	8000be2 <__sfputc_r+0x16>
 8000bde:	290a      	cmp	r1, #10
 8000be0:	d103      	bne.n	8000bea <__sfputc_r+0x1e>
 8000be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000be6:	f000 bb6d 	b.w	80012c4 <__swbuf_r>
 8000bea:	6813      	ldr	r3, [r2, #0]
 8000bec:	1c58      	adds	r0, r3, #1
 8000bee:	6010      	str	r0, [r2, #0]
 8000bf0:	7019      	strb	r1, [r3, #0]
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <__sfputs_r>:
 8000bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	460f      	mov	r7, r1
 8000c00:	4614      	mov	r4, r2
 8000c02:	18d5      	adds	r5, r2, r3
 8000c04:	42ac      	cmp	r4, r5
 8000c06:	d101      	bne.n	8000c0c <__sfputs_r+0x12>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e007      	b.n	8000c1c <__sfputs_r+0x22>
 8000c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c10:	463a      	mov	r2, r7
 8000c12:	4630      	mov	r0, r6
 8000c14:	f7ff ffda 	bl	8000bcc <__sfputc_r>
 8000c18:	1c43      	adds	r3, r0, #1
 8000c1a:	d1f3      	bne.n	8000c04 <__sfputs_r+0xa>
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c20 <_vfiprintf_r>:
 8000c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	460d      	mov	r5, r1
 8000c26:	b09d      	sub	sp, #116	@ 0x74
 8000c28:	4614      	mov	r4, r2
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	b118      	cbz	r0, 8000c38 <_vfiprintf_r+0x18>
 8000c30:	6a03      	ldr	r3, [r0, #32]
 8000c32:	b90b      	cbnz	r3, 8000c38 <_vfiprintf_r+0x18>
 8000c34:	f7ff fdca 	bl	80007cc <__sinit>
 8000c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c3a:	07d9      	lsls	r1, r3, #31
 8000c3c:	d405      	bmi.n	8000c4a <_vfiprintf_r+0x2a>
 8000c3e:	89ab      	ldrh	r3, [r5, #12]
 8000c40:	059a      	lsls	r2, r3, #22
 8000c42:	d402      	bmi.n	8000c4a <_vfiprintf_r+0x2a>
 8000c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c46:	f7ff fec6 	bl	80009d6 <__retarget_lock_acquire_recursive>
 8000c4a:	89ab      	ldrh	r3, [r5, #12]
 8000c4c:	071b      	lsls	r3, r3, #28
 8000c4e:	d501      	bpl.n	8000c54 <_vfiprintf_r+0x34>
 8000c50:	692b      	ldr	r3, [r5, #16]
 8000c52:	b99b      	cbnz	r3, 8000c7c <_vfiprintf_r+0x5c>
 8000c54:	4629      	mov	r1, r5
 8000c56:	4630      	mov	r0, r6
 8000c58:	f000 fb72 	bl	8001340 <__swsetup_r>
 8000c5c:	b170      	cbz	r0, 8000c7c <_vfiprintf_r+0x5c>
 8000c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c60:	07dc      	lsls	r4, r3, #31
 8000c62:	d504      	bpl.n	8000c6e <_vfiprintf_r+0x4e>
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	b01d      	add	sp, #116	@ 0x74
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	0598      	lsls	r0, r3, #22
 8000c72:	d4f7      	bmi.n	8000c64 <_vfiprintf_r+0x44>
 8000c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c76:	f7ff feaf 	bl	80009d8 <__retarget_lock_release_recursive>
 8000c7a:	e7f3      	b.n	8000c64 <_vfiprintf_r+0x44>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c80:	2320      	movs	r3, #32
 8000c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c8a:	2330      	movs	r3, #48	@ 0x30
 8000c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e3c <_vfiprintf_r+0x21c>
 8000c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c94:	f04f 0901 	mov.w	r9, #1
 8000c98:	4623      	mov	r3, r4
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca0:	b10a      	cbz	r2, 8000ca6 <_vfiprintf_r+0x86>
 8000ca2:	2a25      	cmp	r2, #37	@ 0x25
 8000ca4:	d1f9      	bne.n	8000c9a <_vfiprintf_r+0x7a>
 8000ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8000caa:	d00b      	beq.n	8000cc4 <_vfiprintf_r+0xa4>
 8000cac:	465b      	mov	r3, fp
 8000cae:	4622      	mov	r2, r4
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f7ff ffa1 	bl	8000bfa <__sfputs_r>
 8000cb8:	3001      	adds	r0, #1
 8000cba:	f000 80a7 	beq.w	8000e0c <_vfiprintf_r+0x1ec>
 8000cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cc0:	445a      	add	r2, fp
 8000cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 809f 	beq.w	8000e0c <_vfiprintf_r+0x1ec>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cd8:	f10a 0a01 	add.w	sl, sl, #1
 8000cdc:	9304      	str	r3, [sp, #16]
 8000cde:	9307      	str	r3, [sp, #28]
 8000ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ce6:	4654      	mov	r4, sl
 8000ce8:	2205      	movs	r2, #5
 8000cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cee:	4853      	ldr	r0, [pc, #332]	@ (8000e3c <_vfiprintf_r+0x21c>)
 8000cf0:	f7ff fa8e 	bl	8000210 <memchr>
 8000cf4:	9a04      	ldr	r2, [sp, #16]
 8000cf6:	b9d8      	cbnz	r0, 8000d30 <_vfiprintf_r+0x110>
 8000cf8:	06d1      	lsls	r1, r2, #27
 8000cfa:	bf44      	itt	mi
 8000cfc:	2320      	movmi	r3, #32
 8000cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d02:	0713      	lsls	r3, r2, #28
 8000d04:	bf44      	itt	mi
 8000d06:	232b      	movmi	r3, #43	@ 0x2b
 8000d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d12:	d015      	beq.n	8000d40 <_vfiprintf_r+0x120>
 8000d14:	9a07      	ldr	r2, [sp, #28]
 8000d16:	4654      	mov	r4, sl
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f04f 0c0a 	mov.w	ip, #10
 8000d1e:	4621      	mov	r1, r4
 8000d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d24:	3b30      	subs	r3, #48	@ 0x30
 8000d26:	2b09      	cmp	r3, #9
 8000d28:	d94b      	bls.n	8000dc2 <_vfiprintf_r+0x1a2>
 8000d2a:	b1b0      	cbz	r0, 8000d5a <_vfiprintf_r+0x13a>
 8000d2c:	9207      	str	r2, [sp, #28]
 8000d2e:	e014      	b.n	8000d5a <_vfiprintf_r+0x13a>
 8000d30:	eba0 0308 	sub.w	r3, r0, r8
 8000d34:	fa09 f303 	lsl.w	r3, r9, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	46a2      	mov	sl, r4
 8000d3e:	e7d2      	b.n	8000ce6 <_vfiprintf_r+0xc6>
 8000d40:	9b03      	ldr	r3, [sp, #12]
 8000d42:	1d19      	adds	r1, r3, #4
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	9103      	str	r1, [sp, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bfbb      	ittet	lt
 8000d4c:	425b      	neglt	r3, r3
 8000d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d52:	9307      	strge	r3, [sp, #28]
 8000d54:	9307      	strlt	r3, [sp, #28]
 8000d56:	bfb8      	it	lt
 8000d58:	9204      	strlt	r2, [sp, #16]
 8000d5a:	7823      	ldrb	r3, [r4, #0]
 8000d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d5e:	d10a      	bne.n	8000d76 <_vfiprintf_r+0x156>
 8000d60:	7863      	ldrb	r3, [r4, #1]
 8000d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d64:	d132      	bne.n	8000dcc <_vfiprintf_r+0x1ac>
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	1d1a      	adds	r2, r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	9203      	str	r2, [sp, #12]
 8000d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d72:	3402      	adds	r4, #2
 8000d74:	9305      	str	r3, [sp, #20]
 8000d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e4c <_vfiprintf_r+0x22c>
 8000d7a:	7821      	ldrb	r1, [r4, #0]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4650      	mov	r0, sl
 8000d80:	f7ff fa46 	bl	8000210 <memchr>
 8000d84:	b138      	cbz	r0, 8000d96 <_vfiprintf_r+0x176>
 8000d86:	9b04      	ldr	r3, [sp, #16]
 8000d88:	eba0 000a 	sub.w	r0, r0, sl
 8000d8c:	2240      	movs	r2, #64	@ 0x40
 8000d8e:	4082      	lsls	r2, r0
 8000d90:	4313      	orrs	r3, r2
 8000d92:	3401      	adds	r4, #1
 8000d94:	9304      	str	r3, [sp, #16]
 8000d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9a:	4829      	ldr	r0, [pc, #164]	@ (8000e40 <_vfiprintf_r+0x220>)
 8000d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000da0:	2206      	movs	r2, #6
 8000da2:	f7ff fa35 	bl	8000210 <memchr>
 8000da6:	2800      	cmp	r0, #0
 8000da8:	d03f      	beq.n	8000e2a <_vfiprintf_r+0x20a>
 8000daa:	4b26      	ldr	r3, [pc, #152]	@ (8000e44 <_vfiprintf_r+0x224>)
 8000dac:	bb1b      	cbnz	r3, 8000df6 <_vfiprintf_r+0x1d6>
 8000dae:	9b03      	ldr	r3, [sp, #12]
 8000db0:	3307      	adds	r3, #7
 8000db2:	f023 0307 	bic.w	r3, r3, #7
 8000db6:	3308      	adds	r3, #8
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dbc:	443b      	add	r3, r7
 8000dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dc0:	e76a      	b.n	8000c98 <_vfiprintf_r+0x78>
 8000dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dc6:	460c      	mov	r4, r1
 8000dc8:	2001      	movs	r0, #1
 8000dca:	e7a8      	b.n	8000d1e <_vfiprintf_r+0xfe>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	3401      	adds	r4, #1
 8000dd0:	9305      	str	r3, [sp, #20]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0c0a 	mov.w	ip, #10
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dde:	3a30      	subs	r2, #48	@ 0x30
 8000de0:	2a09      	cmp	r2, #9
 8000de2:	d903      	bls.n	8000dec <_vfiprintf_r+0x1cc>
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0c6      	beq.n	8000d76 <_vfiprintf_r+0x156>
 8000de8:	9105      	str	r1, [sp, #20]
 8000dea:	e7c4      	b.n	8000d76 <_vfiprintf_r+0x156>
 8000dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8000df0:	4604      	mov	r4, r0
 8000df2:	2301      	movs	r3, #1
 8000df4:	e7f0      	b.n	8000dd8 <_vfiprintf_r+0x1b8>
 8000df6:	ab03      	add	r3, sp, #12
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	462a      	mov	r2, r5
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <_vfiprintf_r+0x228>)
 8000dfe:	a904      	add	r1, sp, #16
 8000e00:	4630      	mov	r0, r6
 8000e02:	f3af 8000 	nop.w
 8000e06:	4607      	mov	r7, r0
 8000e08:	1c78      	adds	r0, r7, #1
 8000e0a:	d1d6      	bne.n	8000dba <_vfiprintf_r+0x19a>
 8000e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e0e:	07d9      	lsls	r1, r3, #31
 8000e10:	d405      	bmi.n	8000e1e <_vfiprintf_r+0x1fe>
 8000e12:	89ab      	ldrh	r3, [r5, #12]
 8000e14:	059a      	lsls	r2, r3, #22
 8000e16:	d402      	bmi.n	8000e1e <_vfiprintf_r+0x1fe>
 8000e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e1a:	f7ff fddd 	bl	80009d8 <__retarget_lock_release_recursive>
 8000e1e:	89ab      	ldrh	r3, [r5, #12]
 8000e20:	065b      	lsls	r3, r3, #25
 8000e22:	f53f af1f 	bmi.w	8000c64 <_vfiprintf_r+0x44>
 8000e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e28:	e71e      	b.n	8000c68 <_vfiprintf_r+0x48>
 8000e2a:	ab03      	add	r3, sp, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <_vfiprintf_r+0x228>)
 8000e32:	a904      	add	r1, sp, #16
 8000e34:	4630      	mov	r0, r6
 8000e36:	f000 f879 	bl	8000f2c <_printf_i>
 8000e3a:	e7e4      	b.n	8000e06 <_vfiprintf_r+0x1e6>
 8000e3c:	08001548 	.word	0x08001548
 8000e40:	08001552 	.word	0x08001552
 8000e44:	00000000 	.word	0x00000000
 8000e48:	08000bfb 	.word	0x08000bfb
 8000e4c:	0800154e 	.word	0x0800154e

08000e50 <_printf_common>:
 8000e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e54:	4616      	mov	r6, r2
 8000e56:	4698      	mov	r8, r3
 8000e58:	688a      	ldr	r2, [r1, #8]
 8000e5a:	690b      	ldr	r3, [r1, #16]
 8000e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e60:	4293      	cmp	r3, r2
 8000e62:	bfb8      	it	lt
 8000e64:	4613      	movlt	r3, r2
 8000e66:	6033      	str	r3, [r6, #0]
 8000e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e6c:	4607      	mov	r7, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	b10a      	cbz	r2, 8000e76 <_printf_common+0x26>
 8000e72:	3301      	adds	r3, #1
 8000e74:	6033      	str	r3, [r6, #0]
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	0699      	lsls	r1, r3, #26
 8000e7a:	bf42      	ittt	mi
 8000e7c:	6833      	ldrmi	r3, [r6, #0]
 8000e7e:	3302      	addmi	r3, #2
 8000e80:	6033      	strmi	r3, [r6, #0]
 8000e82:	6825      	ldr	r5, [r4, #0]
 8000e84:	f015 0506 	ands.w	r5, r5, #6
 8000e88:	d106      	bne.n	8000e98 <_printf_common+0x48>
 8000e8a:	f104 0a19 	add.w	sl, r4, #25
 8000e8e:	68e3      	ldr	r3, [r4, #12]
 8000e90:	6832      	ldr	r2, [r6, #0]
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	42ab      	cmp	r3, r5
 8000e96:	dc26      	bgt.n	8000ee6 <_printf_common+0x96>
 8000e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e9c:	6822      	ldr	r2, [r4, #0]
 8000e9e:	3b00      	subs	r3, #0
 8000ea0:	bf18      	it	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	0692      	lsls	r2, r2, #26
 8000ea6:	d42b      	bmi.n	8000f00 <_printf_common+0xb0>
 8000ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000eac:	4641      	mov	r1, r8
 8000eae:	4638      	mov	r0, r7
 8000eb0:	47c8      	blx	r9
 8000eb2:	3001      	adds	r0, #1
 8000eb4:	d01e      	beq.n	8000ef4 <_printf_common+0xa4>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	6922      	ldr	r2, [r4, #16]
 8000eba:	f003 0306 	and.w	r3, r3, #6
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf02      	ittt	eq
 8000ec2:	68e5      	ldreq	r5, [r4, #12]
 8000ec4:	6833      	ldreq	r3, [r6, #0]
 8000ec6:	1aed      	subeq	r5, r5, r3
 8000ec8:	68a3      	ldr	r3, [r4, #8]
 8000eca:	bf0c      	ite	eq
 8000ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ed0:	2500      	movne	r5, #0
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	bfc4      	itt	gt
 8000ed6:	1a9b      	subgt	r3, r3, r2
 8000ed8:	18ed      	addgt	r5, r5, r3
 8000eda:	2600      	movs	r6, #0
 8000edc:	341a      	adds	r4, #26
 8000ede:	42b5      	cmp	r5, r6
 8000ee0:	d11a      	bne.n	8000f18 <_printf_common+0xc8>
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e008      	b.n	8000ef8 <_printf_common+0xa8>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4652      	mov	r2, sl
 8000eea:	4641      	mov	r1, r8
 8000eec:	4638      	mov	r0, r7
 8000eee:	47c8      	blx	r9
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d103      	bne.n	8000efc <_printf_common+0xac>
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efc:	3501      	adds	r5, #1
 8000efe:	e7c6      	b.n	8000e8e <_printf_common+0x3e>
 8000f00:	18e1      	adds	r1, r4, r3
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	2030      	movs	r0, #48	@ 0x30
 8000f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f0a:	4422      	add	r2, r4
 8000f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f14:	3302      	adds	r3, #2
 8000f16:	e7c7      	b.n	8000ea8 <_printf_common+0x58>
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4622      	mov	r2, r4
 8000f1c:	4641      	mov	r1, r8
 8000f1e:	4638      	mov	r0, r7
 8000f20:	47c8      	blx	r9
 8000f22:	3001      	adds	r0, #1
 8000f24:	d0e6      	beq.n	8000ef4 <_printf_common+0xa4>
 8000f26:	3601      	adds	r6, #1
 8000f28:	e7d9      	b.n	8000ede <_printf_common+0x8e>
	...

08000f2c <_printf_i>:
 8000f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f30:	7e0f      	ldrb	r7, [r1, #24]
 8000f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f34:	2f78      	cmp	r7, #120	@ 0x78
 8000f36:	4691      	mov	r9, r2
 8000f38:	4680      	mov	r8, r0
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	469a      	mov	sl, r3
 8000f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f42:	d807      	bhi.n	8000f54 <_printf_i+0x28>
 8000f44:	2f62      	cmp	r7, #98	@ 0x62
 8000f46:	d80a      	bhi.n	8000f5e <_printf_i+0x32>
 8000f48:	2f00      	cmp	r7, #0
 8000f4a:	f000 80d2 	beq.w	80010f2 <_printf_i+0x1c6>
 8000f4e:	2f58      	cmp	r7, #88	@ 0x58
 8000f50:	f000 80b9 	beq.w	80010c6 <_printf_i+0x19a>
 8000f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f5c:	e03a      	b.n	8000fd4 <_printf_i+0xa8>
 8000f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f62:	2b15      	cmp	r3, #21
 8000f64:	d8f6      	bhi.n	8000f54 <_printf_i+0x28>
 8000f66:	a101      	add	r1, pc, #4	@ (adr r1, 8000f6c <_printf_i+0x40>)
 8000f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f6c:	08000fc5 	.word	0x08000fc5
 8000f70:	08000fd9 	.word	0x08000fd9
 8000f74:	08000f55 	.word	0x08000f55
 8000f78:	08000f55 	.word	0x08000f55
 8000f7c:	08000f55 	.word	0x08000f55
 8000f80:	08000f55 	.word	0x08000f55
 8000f84:	08000fd9 	.word	0x08000fd9
 8000f88:	08000f55 	.word	0x08000f55
 8000f8c:	08000f55 	.word	0x08000f55
 8000f90:	08000f55 	.word	0x08000f55
 8000f94:	08000f55 	.word	0x08000f55
 8000f98:	080010d9 	.word	0x080010d9
 8000f9c:	08001003 	.word	0x08001003
 8000fa0:	08001093 	.word	0x08001093
 8000fa4:	08000f55 	.word	0x08000f55
 8000fa8:	08000f55 	.word	0x08000f55
 8000fac:	080010fb 	.word	0x080010fb
 8000fb0:	08000f55 	.word	0x08000f55
 8000fb4:	08001003 	.word	0x08001003
 8000fb8:	08000f55 	.word	0x08000f55
 8000fbc:	08000f55 	.word	0x08000f55
 8000fc0:	0800109b 	.word	0x0800109b
 8000fc4:	6833      	ldr	r3, [r6, #0]
 8000fc6:	1d1a      	adds	r2, r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6032      	str	r2, [r6, #0]
 8000fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e09d      	b.n	8001114 <_printf_i+0x1e8>
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	1d19      	adds	r1, r3, #4
 8000fde:	6031      	str	r1, [r6, #0]
 8000fe0:	0606      	lsls	r6, r0, #24
 8000fe2:	d501      	bpl.n	8000fe8 <_printf_i+0xbc>
 8000fe4:	681d      	ldr	r5, [r3, #0]
 8000fe6:	e003      	b.n	8000ff0 <_printf_i+0xc4>
 8000fe8:	0645      	lsls	r5, r0, #25
 8000fea:	d5fb      	bpl.n	8000fe4 <_printf_i+0xb8>
 8000fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	da03      	bge.n	8000ffc <_printf_i+0xd0>
 8000ff4:	232d      	movs	r3, #45	@ 0x2d
 8000ff6:	426d      	negs	r5, r5
 8000ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ffc:	4859      	ldr	r0, [pc, #356]	@ (8001164 <_printf_i+0x238>)
 8000ffe:	230a      	movs	r3, #10
 8001000:	e011      	b.n	8001026 <_printf_i+0xfa>
 8001002:	6821      	ldr	r1, [r4, #0]
 8001004:	6833      	ldr	r3, [r6, #0]
 8001006:	0608      	lsls	r0, r1, #24
 8001008:	f853 5b04 	ldr.w	r5, [r3], #4
 800100c:	d402      	bmi.n	8001014 <_printf_i+0xe8>
 800100e:	0649      	lsls	r1, r1, #25
 8001010:	bf48      	it	mi
 8001012:	b2ad      	uxthmi	r5, r5
 8001014:	2f6f      	cmp	r7, #111	@ 0x6f
 8001016:	4853      	ldr	r0, [pc, #332]	@ (8001164 <_printf_i+0x238>)
 8001018:	6033      	str	r3, [r6, #0]
 800101a:	bf14      	ite	ne
 800101c:	230a      	movne	r3, #10
 800101e:	2308      	moveq	r3, #8
 8001020:	2100      	movs	r1, #0
 8001022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001026:	6866      	ldr	r6, [r4, #4]
 8001028:	60a6      	str	r6, [r4, #8]
 800102a:	2e00      	cmp	r6, #0
 800102c:	bfa2      	ittt	ge
 800102e:	6821      	ldrge	r1, [r4, #0]
 8001030:	f021 0104 	bicge.w	r1, r1, #4
 8001034:	6021      	strge	r1, [r4, #0]
 8001036:	b90d      	cbnz	r5, 800103c <_printf_i+0x110>
 8001038:	2e00      	cmp	r6, #0
 800103a:	d04b      	beq.n	80010d4 <_printf_i+0x1a8>
 800103c:	4616      	mov	r6, r2
 800103e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001042:	fb03 5711 	mls	r7, r3, r1, r5
 8001046:	5dc7      	ldrb	r7, [r0, r7]
 8001048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800104c:	462f      	mov	r7, r5
 800104e:	42bb      	cmp	r3, r7
 8001050:	460d      	mov	r5, r1
 8001052:	d9f4      	bls.n	800103e <_printf_i+0x112>
 8001054:	2b08      	cmp	r3, #8
 8001056:	d10b      	bne.n	8001070 <_printf_i+0x144>
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	07df      	lsls	r7, r3, #31
 800105c:	d508      	bpl.n	8001070 <_printf_i+0x144>
 800105e:	6923      	ldr	r3, [r4, #16]
 8001060:	6861      	ldr	r1, [r4, #4]
 8001062:	4299      	cmp	r1, r3
 8001064:	bfde      	ittt	le
 8001066:	2330      	movle	r3, #48	@ 0x30
 8001068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800106c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001070:	1b92      	subs	r2, r2, r6
 8001072:	6122      	str	r2, [r4, #16]
 8001074:	f8cd a000 	str.w	sl, [sp]
 8001078:	464b      	mov	r3, r9
 800107a:	aa03      	add	r2, sp, #12
 800107c:	4621      	mov	r1, r4
 800107e:	4640      	mov	r0, r8
 8001080:	f7ff fee6 	bl	8000e50 <_printf_common>
 8001084:	3001      	adds	r0, #1
 8001086:	d14a      	bne.n	800111e <_printf_i+0x1f2>
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	b004      	add	sp, #16
 800108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	4833      	ldr	r0, [pc, #204]	@ (8001168 <_printf_i+0x23c>)
 800109c:	2778      	movs	r7, #120	@ 0x78
 800109e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	6831      	ldr	r1, [r6, #0]
 80010a6:	061f      	lsls	r7, r3, #24
 80010a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80010ac:	d402      	bmi.n	80010b4 <_printf_i+0x188>
 80010ae:	065f      	lsls	r7, r3, #25
 80010b0:	bf48      	it	mi
 80010b2:	b2ad      	uxthmi	r5, r5
 80010b4:	6031      	str	r1, [r6, #0]
 80010b6:	07d9      	lsls	r1, r3, #31
 80010b8:	bf44      	itt	mi
 80010ba:	f043 0320 	orrmi.w	r3, r3, #32
 80010be:	6023      	strmi	r3, [r4, #0]
 80010c0:	b11d      	cbz	r5, 80010ca <_printf_i+0x19e>
 80010c2:	2310      	movs	r3, #16
 80010c4:	e7ac      	b.n	8001020 <_printf_i+0xf4>
 80010c6:	4827      	ldr	r0, [pc, #156]	@ (8001164 <_printf_i+0x238>)
 80010c8:	e7e9      	b.n	800109e <_printf_i+0x172>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f023 0320 	bic.w	r3, r3, #32
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	e7f6      	b.n	80010c2 <_printf_i+0x196>
 80010d4:	4616      	mov	r6, r2
 80010d6:	e7bd      	b.n	8001054 <_printf_i+0x128>
 80010d8:	6833      	ldr	r3, [r6, #0]
 80010da:	6825      	ldr	r5, [r4, #0]
 80010dc:	6961      	ldr	r1, [r4, #20]
 80010de:	1d18      	adds	r0, r3, #4
 80010e0:	6030      	str	r0, [r6, #0]
 80010e2:	062e      	lsls	r6, r5, #24
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	d501      	bpl.n	80010ec <_printf_i+0x1c0>
 80010e8:	6019      	str	r1, [r3, #0]
 80010ea:	e002      	b.n	80010f2 <_printf_i+0x1c6>
 80010ec:	0668      	lsls	r0, r5, #25
 80010ee:	d5fb      	bpl.n	80010e8 <_printf_i+0x1bc>
 80010f0:	8019      	strh	r1, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	6123      	str	r3, [r4, #16]
 80010f6:	4616      	mov	r6, r2
 80010f8:	e7bc      	b.n	8001074 <_printf_i+0x148>
 80010fa:	6833      	ldr	r3, [r6, #0]
 80010fc:	1d1a      	adds	r2, r3, #4
 80010fe:	6032      	str	r2, [r6, #0]
 8001100:	681e      	ldr	r6, [r3, #0]
 8001102:	6862      	ldr	r2, [r4, #4]
 8001104:	2100      	movs	r1, #0
 8001106:	4630      	mov	r0, r6
 8001108:	f7ff f882 	bl	8000210 <memchr>
 800110c:	b108      	cbz	r0, 8001112 <_printf_i+0x1e6>
 800110e:	1b80      	subs	r0, r0, r6
 8001110:	6060      	str	r0, [r4, #4]
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	6123      	str	r3, [r4, #16]
 8001116:	2300      	movs	r3, #0
 8001118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800111c:	e7aa      	b.n	8001074 <_printf_i+0x148>
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	4632      	mov	r2, r6
 8001122:	4649      	mov	r1, r9
 8001124:	4640      	mov	r0, r8
 8001126:	47d0      	blx	sl
 8001128:	3001      	adds	r0, #1
 800112a:	d0ad      	beq.n	8001088 <_printf_i+0x15c>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	079b      	lsls	r3, r3, #30
 8001130:	d413      	bmi.n	800115a <_printf_i+0x22e>
 8001132:	68e0      	ldr	r0, [r4, #12]
 8001134:	9b03      	ldr	r3, [sp, #12]
 8001136:	4298      	cmp	r0, r3
 8001138:	bfb8      	it	lt
 800113a:	4618      	movlt	r0, r3
 800113c:	e7a6      	b.n	800108c <_printf_i+0x160>
 800113e:	2301      	movs	r3, #1
 8001140:	4632      	mov	r2, r6
 8001142:	4649      	mov	r1, r9
 8001144:	4640      	mov	r0, r8
 8001146:	47d0      	blx	sl
 8001148:	3001      	adds	r0, #1
 800114a:	d09d      	beq.n	8001088 <_printf_i+0x15c>
 800114c:	3501      	adds	r5, #1
 800114e:	68e3      	ldr	r3, [r4, #12]
 8001150:	9903      	ldr	r1, [sp, #12]
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	42ab      	cmp	r3, r5
 8001156:	dcf2      	bgt.n	800113e <_printf_i+0x212>
 8001158:	e7eb      	b.n	8001132 <_printf_i+0x206>
 800115a:	2500      	movs	r5, #0
 800115c:	f104 0619 	add.w	r6, r4, #25
 8001160:	e7f5      	b.n	800114e <_printf_i+0x222>
 8001162:	bf00      	nop
 8001164:	08001559 	.word	0x08001559
 8001168:	0800156a 	.word	0x0800156a

0800116c <__sflush_r>:
 800116c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001174:	0716      	lsls	r6, r2, #28
 8001176:	4605      	mov	r5, r0
 8001178:	460c      	mov	r4, r1
 800117a:	d454      	bmi.n	8001226 <__sflush_r+0xba>
 800117c:	684b      	ldr	r3, [r1, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc02      	bgt.n	8001188 <__sflush_r+0x1c>
 8001182:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd48      	ble.n	800121a <__sflush_r+0xae>
 8001188:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800118a:	2e00      	cmp	r6, #0
 800118c:	d045      	beq.n	800121a <__sflush_r+0xae>
 800118e:	2300      	movs	r3, #0
 8001190:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001194:	682f      	ldr	r7, [r5, #0]
 8001196:	6a21      	ldr	r1, [r4, #32]
 8001198:	602b      	str	r3, [r5, #0]
 800119a:	d030      	beq.n	80011fe <__sflush_r+0x92>
 800119c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	0759      	lsls	r1, r3, #29
 80011a2:	d505      	bpl.n	80011b0 <__sflush_r+0x44>
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011aa:	b10b      	cbz	r3, 80011b0 <__sflush_r+0x44>
 80011ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	2300      	movs	r3, #0
 80011b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	4628      	mov	r0, r5
 80011b8:	47b0      	blx	r6
 80011ba:	1c43      	adds	r3, r0, #1
 80011bc:	89a3      	ldrh	r3, [r4, #12]
 80011be:	d106      	bne.n	80011ce <__sflush_r+0x62>
 80011c0:	6829      	ldr	r1, [r5, #0]
 80011c2:	291d      	cmp	r1, #29
 80011c4:	d82b      	bhi.n	800121e <__sflush_r+0xb2>
 80011c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001270 <__sflush_r+0x104>)
 80011c8:	410a      	asrs	r2, r1
 80011ca:	07d6      	lsls	r6, r2, #31
 80011cc:	d427      	bmi.n	800121e <__sflush_r+0xb2>
 80011ce:	2200      	movs	r2, #0
 80011d0:	6062      	str	r2, [r4, #4]
 80011d2:	04d9      	lsls	r1, r3, #19
 80011d4:	6922      	ldr	r2, [r4, #16]
 80011d6:	6022      	str	r2, [r4, #0]
 80011d8:	d504      	bpl.n	80011e4 <__sflush_r+0x78>
 80011da:	1c42      	adds	r2, r0, #1
 80011dc:	d101      	bne.n	80011e2 <__sflush_r+0x76>
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	b903      	cbnz	r3, 80011e4 <__sflush_r+0x78>
 80011e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80011e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011e6:	602f      	str	r7, [r5, #0]
 80011e8:	b1b9      	cbz	r1, 800121a <__sflush_r+0xae>
 80011ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011ee:	4299      	cmp	r1, r3
 80011f0:	d002      	beq.n	80011f8 <__sflush_r+0x8c>
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff fbf2 	bl	80009dc <_free_r>
 80011f8:	2300      	movs	r3, #0
 80011fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80011fc:	e00d      	b.n	800121a <__sflush_r+0xae>
 80011fe:	2301      	movs	r3, #1
 8001200:	4628      	mov	r0, r5
 8001202:	47b0      	blx	r6
 8001204:	4602      	mov	r2, r0
 8001206:	1c50      	adds	r0, r2, #1
 8001208:	d1c9      	bne.n	800119e <__sflush_r+0x32>
 800120a:	682b      	ldr	r3, [r5, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0c6      	beq.n	800119e <__sflush_r+0x32>
 8001210:	2b1d      	cmp	r3, #29
 8001212:	d001      	beq.n	8001218 <__sflush_r+0xac>
 8001214:	2b16      	cmp	r3, #22
 8001216:	d11e      	bne.n	8001256 <__sflush_r+0xea>
 8001218:	602f      	str	r7, [r5, #0]
 800121a:	2000      	movs	r0, #0
 800121c:	e022      	b.n	8001264 <__sflush_r+0xf8>
 800121e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001222:	b21b      	sxth	r3, r3
 8001224:	e01b      	b.n	800125e <__sflush_r+0xf2>
 8001226:	690f      	ldr	r7, [r1, #16]
 8001228:	2f00      	cmp	r7, #0
 800122a:	d0f6      	beq.n	800121a <__sflush_r+0xae>
 800122c:	0793      	lsls	r3, r2, #30
 800122e:	680e      	ldr	r6, [r1, #0]
 8001230:	bf08      	it	eq
 8001232:	694b      	ldreq	r3, [r1, #20]
 8001234:	600f      	str	r7, [r1, #0]
 8001236:	bf18      	it	ne
 8001238:	2300      	movne	r3, #0
 800123a:	eba6 0807 	sub.w	r8, r6, r7
 800123e:	608b      	str	r3, [r1, #8]
 8001240:	f1b8 0f00 	cmp.w	r8, #0
 8001244:	dde9      	ble.n	800121a <__sflush_r+0xae>
 8001246:	6a21      	ldr	r1, [r4, #32]
 8001248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800124a:	4643      	mov	r3, r8
 800124c:	463a      	mov	r2, r7
 800124e:	4628      	mov	r0, r5
 8001250:	47b0      	blx	r6
 8001252:	2800      	cmp	r0, #0
 8001254:	dc08      	bgt.n	8001268 <__sflush_r+0xfc>
 8001256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125e:	81a3      	strh	r3, [r4, #12]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001268:	4407      	add	r7, r0
 800126a:	eba8 0800 	sub.w	r8, r8, r0
 800126e:	e7e7      	b.n	8001240 <__sflush_r+0xd4>
 8001270:	dfbffffe 	.word	0xdfbffffe

08001274 <_fflush_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	690b      	ldr	r3, [r1, #16]
 8001278:	4605      	mov	r5, r0
 800127a:	460c      	mov	r4, r1
 800127c:	b913      	cbnz	r3, 8001284 <_fflush_r+0x10>
 800127e:	2500      	movs	r5, #0
 8001280:	4628      	mov	r0, r5
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	b118      	cbz	r0, 800128e <_fflush_r+0x1a>
 8001286:	6a03      	ldr	r3, [r0, #32]
 8001288:	b90b      	cbnz	r3, 800128e <_fflush_r+0x1a>
 800128a:	f7ff fa9f 	bl	80007cc <__sinit>
 800128e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f3      	beq.n	800127e <_fflush_r+0xa>
 8001296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001298:	07d0      	lsls	r0, r2, #31
 800129a:	d404      	bmi.n	80012a6 <_fflush_r+0x32>
 800129c:	0599      	lsls	r1, r3, #22
 800129e:	d402      	bmi.n	80012a6 <_fflush_r+0x32>
 80012a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012a2:	f7ff fb98 	bl	80009d6 <__retarget_lock_acquire_recursive>
 80012a6:	4628      	mov	r0, r5
 80012a8:	4621      	mov	r1, r4
 80012aa:	f7ff ff5f 	bl	800116c <__sflush_r>
 80012ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012b0:	07da      	lsls	r2, r3, #31
 80012b2:	4605      	mov	r5, r0
 80012b4:	d4e4      	bmi.n	8001280 <_fflush_r+0xc>
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	059b      	lsls	r3, r3, #22
 80012ba:	d4e1      	bmi.n	8001280 <_fflush_r+0xc>
 80012bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012be:	f7ff fb8b 	bl	80009d8 <__retarget_lock_release_recursive>
 80012c2:	e7dd      	b.n	8001280 <_fflush_r+0xc>

080012c4 <__swbuf_r>:
 80012c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c6:	460e      	mov	r6, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	4605      	mov	r5, r0
 80012cc:	b118      	cbz	r0, 80012d6 <__swbuf_r+0x12>
 80012ce:	6a03      	ldr	r3, [r0, #32]
 80012d0:	b90b      	cbnz	r3, 80012d6 <__swbuf_r+0x12>
 80012d2:	f7ff fa7b 	bl	80007cc <__sinit>
 80012d6:	69a3      	ldr	r3, [r4, #24]
 80012d8:	60a3      	str	r3, [r4, #8]
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	071a      	lsls	r2, r3, #28
 80012de:	d501      	bpl.n	80012e4 <__swbuf_r+0x20>
 80012e0:	6923      	ldr	r3, [r4, #16]
 80012e2:	b943      	cbnz	r3, 80012f6 <__swbuf_r+0x32>
 80012e4:	4621      	mov	r1, r4
 80012e6:	4628      	mov	r0, r5
 80012e8:	f000 f82a 	bl	8001340 <__swsetup_r>
 80012ec:	b118      	cbz	r0, 80012f6 <__swbuf_r+0x32>
 80012ee:	f04f 37ff 	mov.w	r7, #4294967295
 80012f2:	4638      	mov	r0, r7
 80012f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	6922      	ldr	r2, [r4, #16]
 80012fa:	1a98      	subs	r0, r3, r2
 80012fc:	6963      	ldr	r3, [r4, #20]
 80012fe:	b2f6      	uxtb	r6, r6
 8001300:	4283      	cmp	r3, r0
 8001302:	4637      	mov	r7, r6
 8001304:	dc05      	bgt.n	8001312 <__swbuf_r+0x4e>
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
 800130a:	f7ff ffb3 	bl	8001274 <_fflush_r>
 800130e:	2800      	cmp	r0, #0
 8001310:	d1ed      	bne.n	80012ee <__swbuf_r+0x2a>
 8001312:	68a3      	ldr	r3, [r4, #8]
 8001314:	3b01      	subs	r3, #1
 8001316:	60a3      	str	r3, [r4, #8]
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	6022      	str	r2, [r4, #0]
 800131e:	701e      	strb	r6, [r3, #0]
 8001320:	6962      	ldr	r2, [r4, #20]
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	429a      	cmp	r2, r3
 8001326:	d004      	beq.n	8001332 <__swbuf_r+0x6e>
 8001328:	89a3      	ldrh	r3, [r4, #12]
 800132a:	07db      	lsls	r3, r3, #31
 800132c:	d5e1      	bpl.n	80012f2 <__swbuf_r+0x2e>
 800132e:	2e0a      	cmp	r6, #10
 8001330:	d1df      	bne.n	80012f2 <__swbuf_r+0x2e>
 8001332:	4621      	mov	r1, r4
 8001334:	4628      	mov	r0, r5
 8001336:	f7ff ff9d 	bl	8001274 <_fflush_r>
 800133a:	2800      	cmp	r0, #0
 800133c:	d0d9      	beq.n	80012f2 <__swbuf_r+0x2e>
 800133e:	e7d6      	b.n	80012ee <__swbuf_r+0x2a>

08001340 <__swsetup_r>:
 8001340:	b538      	push	{r3, r4, r5, lr}
 8001342:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <__swsetup_r+0xa8>)
 8001344:	4605      	mov	r5, r0
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	460c      	mov	r4, r1
 800134a:	b118      	cbz	r0, 8001354 <__swsetup_r+0x14>
 800134c:	6a03      	ldr	r3, [r0, #32]
 800134e:	b90b      	cbnz	r3, 8001354 <__swsetup_r+0x14>
 8001350:	f7ff fa3c 	bl	80007cc <__sinit>
 8001354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001358:	0719      	lsls	r1, r3, #28
 800135a:	d422      	bmi.n	80013a2 <__swsetup_r+0x62>
 800135c:	06da      	lsls	r2, r3, #27
 800135e:	d407      	bmi.n	8001370 <__swsetup_r+0x30>
 8001360:	2209      	movs	r2, #9
 8001362:	602a      	str	r2, [r5, #0]
 8001364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	f04f 30ff 	mov.w	r0, #4294967295
 800136e:	e033      	b.n	80013d8 <__swsetup_r+0x98>
 8001370:	0758      	lsls	r0, r3, #29
 8001372:	d512      	bpl.n	800139a <__swsetup_r+0x5a>
 8001374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001376:	b141      	cbz	r1, 800138a <__swsetup_r+0x4a>
 8001378:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800137c:	4299      	cmp	r1, r3
 800137e:	d002      	beq.n	8001386 <__swsetup_r+0x46>
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff fb2b 	bl	80009dc <_free_r>
 8001386:	2300      	movs	r3, #0
 8001388:	6363      	str	r3, [r4, #52]	@ 0x34
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001390:	81a3      	strh	r3, [r4, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	6063      	str	r3, [r4, #4]
 8001396:	6923      	ldr	r3, [r4, #16]
 8001398:	6023      	str	r3, [r4, #0]
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	81a3      	strh	r3, [r4, #12]
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	b94b      	cbnz	r3, 80013ba <__swsetup_r+0x7a>
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013b0:	d003      	beq.n	80013ba <__swsetup_r+0x7a>
 80013b2:	4621      	mov	r1, r4
 80013b4:	4628      	mov	r0, r5
 80013b6:	f000 f84f 	bl	8001458 <__smakebuf_r>
 80013ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013be:	f013 0201 	ands.w	r2, r3, #1
 80013c2:	d00a      	beq.n	80013da <__swsetup_r+0x9a>
 80013c4:	2200      	movs	r2, #0
 80013c6:	60a2      	str	r2, [r4, #8]
 80013c8:	6962      	ldr	r2, [r4, #20]
 80013ca:	4252      	negs	r2, r2
 80013cc:	61a2      	str	r2, [r4, #24]
 80013ce:	6922      	ldr	r2, [r4, #16]
 80013d0:	b942      	cbnz	r2, 80013e4 <__swsetup_r+0xa4>
 80013d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013d6:	d1c5      	bne.n	8001364 <__swsetup_r+0x24>
 80013d8:	bd38      	pop	{r3, r4, r5, pc}
 80013da:	0799      	lsls	r1, r3, #30
 80013dc:	bf58      	it	pl
 80013de:	6962      	ldrpl	r2, [r4, #20]
 80013e0:	60a2      	str	r2, [r4, #8]
 80013e2:	e7f4      	b.n	80013ce <__swsetup_r+0x8e>
 80013e4:	2000      	movs	r0, #0
 80013e6:	e7f7      	b.n	80013d8 <__swsetup_r+0x98>
 80013e8:	2000000c 	.word	0x2000000c

080013ec <_sbrk_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4d06      	ldr	r5, [pc, #24]	@ (8001408 <_sbrk_r+0x1c>)
 80013f0:	2300      	movs	r3, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	602b      	str	r3, [r5, #0]
 80013f8:	f7ff f866 	bl	80004c8 <_sbrk>
 80013fc:	1c43      	adds	r3, r0, #1
 80013fe:	d102      	bne.n	8001406 <_sbrk_r+0x1a>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	b103      	cbz	r3, 8001406 <_sbrk_r+0x1a>
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	bd38      	pop	{r3, r4, r5, pc}
 8001408:	200001bc 	.word	0x200001bc

0800140c <__swhatbuf_r>:
 800140c:	b570      	push	{r4, r5, r6, lr}
 800140e:	460c      	mov	r4, r1
 8001410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001414:	2900      	cmp	r1, #0
 8001416:	b096      	sub	sp, #88	@ 0x58
 8001418:	4615      	mov	r5, r2
 800141a:	461e      	mov	r6, r3
 800141c:	da0d      	bge.n	800143a <__swhatbuf_r+0x2e>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	bf14      	ite	ne
 800142a:	2340      	movne	r3, #64	@ 0x40
 800142c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001430:	2000      	movs	r0, #0
 8001432:	6031      	str	r1, [r6, #0]
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	b016      	add	sp, #88	@ 0x58
 8001438:	bd70      	pop	{r4, r5, r6, pc}
 800143a:	466a      	mov	r2, sp
 800143c:	f000 f848 	bl	80014d0 <_fstat_r>
 8001440:	2800      	cmp	r0, #0
 8001442:	dbec      	blt.n	800141e <__swhatbuf_r+0x12>
 8001444:	9901      	ldr	r1, [sp, #4]
 8001446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800144a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800144e:	4259      	negs	r1, r3
 8001450:	4159      	adcs	r1, r3
 8001452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001456:	e7eb      	b.n	8001430 <__swhatbuf_r+0x24>

08001458 <__smakebuf_r>:
 8001458:	898b      	ldrh	r3, [r1, #12]
 800145a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800145c:	079d      	lsls	r5, r3, #30
 800145e:	4606      	mov	r6, r0
 8001460:	460c      	mov	r4, r1
 8001462:	d507      	bpl.n	8001474 <__smakebuf_r+0x1c>
 8001464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	6123      	str	r3, [r4, #16]
 800146c:	2301      	movs	r3, #1
 800146e:	6163      	str	r3, [r4, #20]
 8001470:	b003      	add	sp, #12
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001474:	ab01      	add	r3, sp, #4
 8001476:	466a      	mov	r2, sp
 8001478:	f7ff ffc8 	bl	800140c <__swhatbuf_r>
 800147c:	9f00      	ldr	r7, [sp, #0]
 800147e:	4605      	mov	r5, r0
 8001480:	4639      	mov	r1, r7
 8001482:	4630      	mov	r0, r6
 8001484:	f7ff fb16 	bl	8000ab4 <_malloc_r>
 8001488:	b948      	cbnz	r0, 800149e <__smakebuf_r+0x46>
 800148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148e:	059a      	lsls	r2, r3, #22
 8001490:	d4ee      	bmi.n	8001470 <__smakebuf_r+0x18>
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	81a3      	strh	r3, [r4, #12]
 800149c:	e7e2      	b.n	8001464 <__smakebuf_r+0xc>
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	6020      	str	r0, [r4, #0]
 80014a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	9b01      	ldr	r3, [sp, #4]
 80014aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014ae:	b15b      	cbz	r3, 80014c8 <__smakebuf_r+0x70>
 80014b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014b4:	4630      	mov	r0, r6
 80014b6:	f000 f81d 	bl	80014f4 <_isatty_r>
 80014ba:	b128      	cbz	r0, 80014c8 <__smakebuf_r+0x70>
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	f023 0303 	bic.w	r3, r3, #3
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	81a3      	strh	r3, [r4, #12]
 80014c8:	89a3      	ldrh	r3, [r4, #12]
 80014ca:	431d      	orrs	r5, r3
 80014cc:	81a5      	strh	r5, [r4, #12]
 80014ce:	e7cf      	b.n	8001470 <__smakebuf_r+0x18>

080014d0 <_fstat_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d07      	ldr	r5, [pc, #28]	@ (80014f0 <_fstat_r+0x20>)
 80014d4:	2300      	movs	r3, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	602b      	str	r3, [r5, #0]
 80014de:	f7fe ffca 	bl	8000476 <_fstat>
 80014e2:	1c43      	adds	r3, r0, #1
 80014e4:	d102      	bne.n	80014ec <_fstat_r+0x1c>
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	b103      	cbz	r3, 80014ec <_fstat_r+0x1c>
 80014ea:	6023      	str	r3, [r4, #0]
 80014ec:	bd38      	pop	{r3, r4, r5, pc}
 80014ee:	bf00      	nop
 80014f0:	200001bc 	.word	0x200001bc

080014f4 <_isatty_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d06      	ldr	r5, [pc, #24]	@ (8001510 <_isatty_r+0x1c>)
 80014f8:	2300      	movs	r3, #0
 80014fa:	4604      	mov	r4, r0
 80014fc:	4608      	mov	r0, r1
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	f7fe ffc9 	bl	8000496 <_isatty>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d102      	bne.n	800150e <_isatty_r+0x1a>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	b103      	cbz	r3, 800150e <_isatty_r+0x1a>
 800150c:	6023      	str	r3, [r4, #0]
 800150e:	bd38      	pop	{r3, r4, r5, pc}
 8001510:	200001bc 	.word	0x200001bc

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
