
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  000013f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003f0  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003f0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003f0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000062c  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a5  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000dc0  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d77  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec59  00000000  00000000  000037f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009244c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00092490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00092558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003d0 	.word	0x080003d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003d0 	.word	0x080003d0

08000204 <main>:


int timestamp = 0;
//Set up a jumper wire from PA5 to PA6
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	tim2_pa5_output_compare();
 8000208:	f000 f814 	bl	8000234 <tim2_pa5_output_compare>
	tim3_pa6_intput_capture();
 800020c:	f000 f85a 	bl	80002c4 <tim3_pa6_intput_capture>

	while(1)
	{
		//Wait until edge is captured
		while(!(TIM3->SR & SR_CC1IF)){}
 8000210:	bf00      	nop
 8000212:	4b06      	ldr	r3, [pc, #24]	@ (800022c <main+0x28>)
 8000214:	691b      	ldr	r3, [r3, #16]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <main+0xe>
		//Read value
		timestamp = TIM3->CCR1;
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <main+0x28>)
 8000220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000222:	461a      	mov	r2, r3
 8000224:	4b02      	ldr	r3, [pc, #8]	@ (8000230 <main+0x2c>)
 8000226:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 8000228:	e7f2      	b.n	8000210 <main+0xc>
 800022a:	bf00      	nop
 800022c:	40000400 	.word	0x40000400
 8000230:	2000001c 	.word	0x2000001c

08000234 <tim2_pa5_output_compare>:
	TIM2->CNT = 0;
	//Enable the timer
	TIM2->CR1 = CR1_CEN;
}

void tim2_pa5_output_compare(void){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000238:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <tim2_pa5_output_compare+0x88>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023c:	4a1f      	ldr	r2, [pc, #124]	@ (80002bc <tim2_pa5_output_compare+0x88>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &= ~(1U<<10);
 8000244:	4b1e      	ldr	r3, [pc, #120]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a1d      	ldr	r2, [pc, #116]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 800024a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 8000250:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1a      	ldr	r2, [pc, #104]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 8000256:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800025a:	6013      	str	r3, [r2, #0]

	//Set PA5 mode to alternate function

	//Set PA5 alternate function type to TIM2_CH1
	GPIOA->AFR[0] |= AFR5_TIM;
 800025c:	4b18      	ldr	r3, [pc, #96]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <tim2_pa5_output_compare+0x8c>)
 8000262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000266:	6213      	str	r3, [r2, #32]
	//Enable clock access to Timer 2
	RCC->APB1ENR |= TIM2EN;
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <tim2_pa5_output_compare+0x88>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <tim2_pa5_output_compare+0x88>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40
	// Set Prescalaer value
	TIM2->PSC = 1600 -1; //16 000 000 / 1600 = 10000
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	f240 623f 	movw	r2, #1599	@ 0x63f
 800027c:	629a      	str	r2, [r3, #40]	@ 0x28
	//Set auto-reload value
	TIM2->ARR = 10000 - 1;
 800027e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000282:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000286:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Set the output compare toggle mode
	TIM2->CCMR1 = OC_TOGGLE;
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	2230      	movs	r2, #48	@ 0x30
 800028e:	619a      	str	r2, [r3, #24]
	//Enable TIM2 in compare mode
	TIM2->CCER |= CCER_CC1E;
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	6a1b      	ldr	r3, [r3, #32]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6213      	str	r3, [r2, #32]

	//Clear the counter
	TIM2->CNT = 0;
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	2200      	movs	r2, #0
 80002a6:	625a      	str	r2, [r3, #36]	@ 0x24
	//Enable the timer
	TIM2->CR1 = CR1_CEN;
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000

080002c4 <tim3_pa6_intput_capture>:

void tim3_pa6_intput_capture(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <tim3_pa6_intput_capture+0x64>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <tim3_pa6_intput_capture+0x64>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA6 mode to alternate function
	GPIOA->MODER &= ~(1U<<12);
 80002d4:	4b15      	ldr	r3, [pc, #84]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a14      	ldr	r2, [pc, #80]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ea:	6013      	str	r3, [r2, #0]
	//Set PA6 alternate function type to TIM3_CH1(AF2)
	GPIOA->AFR[0] |= AF6_TIM;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <tim3_pa6_intput_capture+0x68>)
 80002f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002f6:	6213      	str	r3, [r2, #32]

	//Enable clock access to Timer 3
	RCC->APB1ENR |= TIM3EN;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <tim3_pa6_intput_capture+0x64>)
 80002fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <tim3_pa6_intput_capture+0x64>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6413      	str	r3, [r2, #64]	@ 0x40
	// Set Prescalaer value
	TIM3->PSC = 16000 - 1; //16 000 000 /16 000
 8000304:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <tim3_pa6_intput_capture+0x6c>)
 8000306:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800030a:	629a      	str	r2, [r3, #40]	@ 0x28
	//Set CH1 to capture at evey edge => Set CH1 to input capture
	TIM3->CCMR1 = CCR1_CC1S;
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <tim3_pa6_intput_capture+0x6c>)
 800030e:	2201      	movs	r2, #1
 8000310:	619a      	str	r2, [r3, #24]
	//Enable CH1 to capture at rising edge
	TIM3->CCER = CCER_CC1E;
 8000312:	4b07      	ldr	r3, [pc, #28]	@ (8000330 <tim3_pa6_intput_capture+0x6c>)
 8000314:	2201      	movs	r2, #1
 8000316:	621a      	str	r2, [r3, #32]
	//Enable TIM3
	TIM3->CR1 = CR1_CEN;
 8000318:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <tim3_pa6_intput_capture+0x6c>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800
 800032c:	40020000 	.word	0x40020000
 8000330:	40000400 	.word	0x40000400

08000334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000334:	480d      	ldr	r0, [pc, #52]	@ (800036c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000336:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000338:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000362:	f000 f811 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000366:	f7ff ff4d 	bl	8000204 <main>

0800036a <LoopForever>:

LoopForever:
  b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   r0, =_estack
 800036c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000378:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 800037c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000380:	20000020 	.word	0x20000020

08000384 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC_IRQHandler>
	...

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	@ (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	@ (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	@ (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	@ (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
