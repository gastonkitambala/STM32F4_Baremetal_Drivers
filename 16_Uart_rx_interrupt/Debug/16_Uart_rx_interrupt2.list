
16_Uart_rx_interrupt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004d4  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c61  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000323  00000000  00000000  00002165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00002488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000db2  00000000  00000000  000025be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f84  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1d4  00000000  00000000  000042f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000934c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  0009350c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000936e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004b4 	.word	0x080004b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004b4 	.word	0x080004b4

08000204 <main>:

void setupLED(void);
char key;
static void uart_callback(void);
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	//Enable clock access to GPIOA
	RCC->AHB1ENR |=GPIOAEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	@ (8000234 <main+0x30>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a09      	ldr	r2, [pc, #36]	@ (8000234 <main+0x30>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA5 as output
	GPIOA->MODER |=(1U<<10);
 8000214:	4b08      	ldr	r3, [pc, #32]	@ (8000238 <main+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	@ (8000238 <main+0x34>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <main+0x34>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a04      	ldr	r2, [pc, #16]	@ (8000238 <main+0x34>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]
	//uart2_rxtx_init();
	uart2_rx_interrupt_init();
 800022c:	f000 f856 	bl	80002dc <uart2_rx_interrupt_init>
	while(1)
 8000230:	bf00      	nop
 8000232:	e7fd      	b.n	8000230 <main+0x2c>
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000

0800023c <uart_callback>:

	}
}

static void uart_callback(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000240:	4b0d      	ldr	r3, [pc, #52]	@ (8000278 <uart_callback+0x3c>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <uart_callback+0x40>)
 8000248:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <uart_callback+0x40>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b31      	cmp	r3, #49	@ 0x31
 8000250:	d106      	bne.n	8000260 <uart_callback+0x24>
			{
				GPIOA->ODR |= LED_PIN;
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <uart_callback+0x44>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <uart_callback+0x44>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
			}
			else{
				GPIOA->ODR &= ~LED_PIN;
			}
}
 800025e:	e005      	b.n	800026c <uart_callback+0x30>
				GPIOA->ODR &= ~LED_PIN;
 8000260:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <uart_callback+0x44>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <uart_callback+0x44>)
 8000266:	f023 0320 	bic.w	r3, r3, #32
 800026a:	6153      	str	r3, [r2, #20]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40004400 	.word	0x40004400
 800027c:	2000001c 	.word	0x2000001c
 8000280:	40020000 	.word	0x40020000

08000284 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	//Check if RXNE is set
	if(USART2->SR & SR_RXNE)
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <USART2_IRQHandler+0x18>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <USART2_IRQHandler+0x14>
	{
		//Do something
		uart_callback();
 8000294:	f7ff ffd2 	bl	800023c <uart_callback>
	}
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40004400 	.word	0x40004400

080002a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db0b      	blt.n	80002ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f003 021f 	and.w	r2, r3, #31
 80002b8:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <__NVIC_EnableIRQ+0x38>)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	095b      	lsrs	r3, r3, #5
 80002c0:	2001      	movs	r0, #1
 80002c2:	fa00 f202 	lsl.w	r2, r0, r2
 80002c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e100 	.word	0xe000e100

080002dc <uart2_rx_interrupt_init>:
	uart2_write(ch);
	return ch;
}

void uart2_rx_interrupt_init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//Configure UART gpio pins
	//Enable clock access to gpioa
	RCC->AHB1ENR |= GPIOAEN;
 80002e0:	4b36      	ldr	r3, [pc, #216]	@ (80003bc <uart2_rx_interrupt_init+0xe0>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a35      	ldr	r2, [pc, #212]	@ (80003bc <uart2_rx_interrupt_init+0xe0>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set PA2 Mode to alternate function mode
	GPIOA->MODER &= ~(1<<4);
 80002ec:	4b34      	ldr	r3, [pc, #208]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a33      	ldr	r2, [pc, #204]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 80002f2:	f023 0310 	bic.w	r3, r3, #16
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1<<5);
 80002f8:	4b31      	ldr	r3, [pc, #196]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a30      	ldr	r2, [pc, #192]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6013      	str	r3, [r2, #0]

	//Set PA2 alternate function type to UART_TX (AF7)
	GPIOA->AFR[0] |= (1<<8);
 8000304:	4b2e      	ldr	r3, [pc, #184]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a2d      	ldr	r2, [pc, #180]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800030a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800030e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000310:	4b2b      	ldr	r3, [pc, #172]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a2a      	ldr	r2, [pc, #168]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800031a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 800031c:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800031e:	6a1b      	ldr	r3, [r3, #32]
 8000320:	4a27      	ldr	r2, [pc, #156]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000326:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000328:	4b25      	ldr	r3, [pc, #148]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4a24      	ldr	r2, [pc, #144]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800032e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000332:	6213      	str	r3, [r2, #32]

	//Set PA3 mode to alternate function mode
	GPIOA->MODER &= ~(1<<6);
 8000334:	4b22      	ldr	r3, [pc, #136]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a21      	ldr	r2, [pc, #132]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800033a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800033e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1<<7);
 8000340:	4b1f      	ldr	r3, [pc, #124]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1e      	ldr	r2, [pc, #120]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800034a:	6013      	str	r3, [r2, #0]

	//Set PA3 alternate function type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1<<12);
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a1b      	ldr	r2, [pc, #108]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000352:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000356:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<13);
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a18      	ldr	r2, [pc, #96]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000362:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<14);
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a15      	ldr	r2, [pc, #84]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800036e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <uart2_rx_interrupt_init+0xe4>)
 8000376:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800037a:	6213      	str	r3, [r2, #32]


	//Configure UART module
	//Enable access to UART2
	RCC->APB1ENR |= UART2EN;
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <uart2_rx_interrupt_init+0xe0>)
 800037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000380:	4a0e      	ldr	r2, [pc, #56]	@ (80003bc <uart2_rx_interrupt_init+0xe0>)
 8000382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000386:	6413      	str	r3, [r2, #64]	@ 0x40
	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE );
 8000388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800038c:	490d      	ldr	r1, [pc, #52]	@ (80003c4 <uart2_rx_interrupt_init+0xe8>)
 800038e:	480e      	ldr	r0, [pc, #56]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 8000390:	f000 f81c 	bl	80003cc <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 8000396:	220c      	movs	r2, #12
 8000398:	60da      	str	r2, [r3, #12]

	/* Enable RXNEIE interrupt*/
	USART2->CR1 |= CR1_RXNEIE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn);
 80003a6:	2026      	movs	r0, #38	@ 0x26
 80003a8:	f7ff ff7a 	bl	80002a0 <__NVIC_EnableIRQ>
	//Enable UART2 Interrupt in NVIC
	//Enable UART module
	USART2->CR1 |= CR1_UE;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4a05      	ldr	r2, [pc, #20]	@ (80003c8 <uart2_rx_interrupt_init+0xec>)
 80003b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003b6:	60d3      	str	r3, [r2, #12]
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000
 80003c4:	00f42400 	.word	0x00f42400
 80003c8:	40004400 	.word	0x40004400

080003cc <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t Baudrate)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, Baudrate);
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	68b8      	ldr	r0, [r7, #8]
 80003dc:	f000 f808 	bl	80003f0 <compute_uart_bd>
 80003e0:	4603      	mov	r3, r0
 80003e2:	461a      	mov	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	609a      	str	r2, [r3, #8]
}
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t Baudrate)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk +(Baudrate/2U))/Baudrate);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	085a      	lsrs	r2, r3, #1
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	441a      	add	r2, r3
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	fbb2 f3f3 	udiv	r3, r2, r3
 8000408:	b29b      	uxth	r3, r3
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff fedb 	bl	8000204 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	20000020 	.word	0x20000020

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	@ (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	@ (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	@ (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	@ (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
